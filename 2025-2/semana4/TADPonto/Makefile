# ==========================================================
# Makefile - TADPonto
# =========================================================

# 1Ô∏è‚É£ Vari√°veis (para facilitar manuten√ß√£o)
CFLAGS=-O0 -std=c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow 
CLIBS=-lm
EXECUTAVEL=TADPonto.exe # nome do execut√°vel final

# ==========================================================
# 2Ô∏è‚É£ Alvo principal (primeiro alvo ‚Üí padr√£o ao rodar "make")
# ==========================================================

$(EXECUTAVEL): main.o Ponto.o
	@echo "üîß Ligando objetos e gerando execut√°vel..."
	gcc main.o Ponto.o $(CLIBS) -o $(EXECUTAVEL)
	@echo "‚úÖ Compila√ß√£o conclu√≠da."
	@echo "üöÄ Para executar o programa digite ./$(EXECUTAVEL) no terminal."


# ==========================================================
# 3Ô∏è‚É£ Regras para gerar os arquivos objeto
# ==========================================================

main.o: main.c
	@echo "üß© Compilando main.c"
	gcc -c $(CFLAGS) main.c

Ponto.o: Ponto.c
	@echo "üß© Compilando Ponto.c"
	gcc -c $(CFLAGS) Ponto.c


# ==========================================================
# 4Ô∏è‚É£ Alvos auxiliares (n√£o geram arquivos ‚Üí PHONY)
# ==========================================================

.PHONY: clean run memcheck

# Executa o programa (compila antes se necess√°rio)
run: $(EXECUTAVEL)
	@echo "üöÄ Executando o programa:"
	./$(EXECUTAVEL)

# Executa o programa com o valgrind (compila antes se necess√°rio)
memcheck: $(EXECUTAVEL)
	@echo "üëæ Verificando vazamento de mem√≥ria com o valgrind:"
	valgrind --tool=memcheck --leak-check=full ./$(EXECUTAVEL)

# Limpa os arquivos tempor√°rios
clean: 
	@echo "üßπ Limpando arquivos compilados..."
	rm -rf *.o $(EXECUTAVEL)
	@echo "üßº Diret√≥rio limpo!"
	
